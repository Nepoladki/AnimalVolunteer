// <auto-generated />
using System;
using System.Collections.Generic;
using AnimalVolunteer.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AnimalVolunteer.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240819100248_InitialMigration2")]
    partial class InitialMigration2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AnimalVolunteer.Domain.Aggregates.Species", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.ComplexProperty<Dictionary<string, object>>("Title", "AnimalVolunteer.Domain.Aggregates.Species.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("title");
                        });

                    b.HasKey("Id")
                        .HasName("pk_species");

                    b.ToTable("species", (string)null);
                });

            modelBuilder.Entity("AnimalVolunteer.Domain.Aggregates.Volunteer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<int>("ExpirienceYears")
                        .HasColumnType("integer")
                        .HasColumnName("expirience_years");

                    b.Property<int>("PetsFoundedHome")
                        .HasColumnType("integer")
                        .HasColumnName("pets_founded_home");

                    b.Property<int>("PetsInVetClinic")
                        .HasColumnType("integer")
                        .HasColumnName("pets_in_vet_clinic");

                    b.Property<int>("PetsLookingForHome")
                        .HasColumnType("integer")
                        .HasColumnName("pets_looking_for_home");

                    b.ComplexProperty<Dictionary<string, object>>("FullName", "AnimalVolunteer.Domain.Aggregates.Volunteer.FullName#FullName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("last_name");

                            b1.Property<string>("SurName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("surname");
                        });

                    b.HasKey("Id")
                        .HasName("pk_volunteers");

                    b.ToTable("volunteers", (string)null);
                });

            modelBuilder.Entity("AnimalVolunteer.Domain.Entities.Breed", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("species_id")
                        .HasColumnType("uuid")
                        .HasColumnName("species_id");

                    b.ComplexProperty<Dictionary<string, object>>("Title", "AnimalVolunteer.Domain.Entities.Breed.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("title");
                        });

                    b.HasKey("Id")
                        .HasName("pk_breeds");

                    b.HasIndex("species_id")
                        .HasDatabaseName("ix_breeds_species_id");

                    b.ToTable("breeds", (string)null);
                });

            modelBuilder.Entity("AnimalVolunteer.Domain.Entities.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("current_status");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<float>("Height")
                        .HasColumnType("real")
                        .HasColumnName("height");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<float>("Weight")
                        .HasColumnType("real")
                        .HasColumnName("weight");

                    b.Property<Guid?>("volunteer_id")
                        .HasColumnType("uuid")
                        .HasColumnName("volunteer_id");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "AnimalVolunteer.Domain.Entities.Pet.Address#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("country");

                            b1.Property<string>("House")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("house");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("street");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("HealthInfo", "AnimalVolunteer.Domain.Entities.Pet.HealthInfo#HealthInfo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("description");

                            b1.Property<bool>("IsNeutered")
                                .HasColumnType("boolean")
                                .HasColumnName("is_neutered");

                            b1.Property<bool>("IsVaccinated")
                                .HasColumnType("boolean")
                                .HasColumnName("is_vaccinated");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("SpeciesAndBreed", "AnimalVolunteer.Domain.Entities.Pet.SpeciesAndBreed#SpeciesAndBreed", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<Guid>("BreedId")
                                .HasColumnType("uuid")
                                .HasColumnName("breed_id");

                            b1.Property<Guid>("SpeciesId")
                                .HasColumnType("uuid")
                                .HasColumnName("species_id");
                        });

                    b.HasKey("Id")
                        .HasName("pk_pets");

                    b.HasIndex("volunteer_id")
                        .HasDatabaseName("ix_pets_volunteer_id");

                    b.ToTable("pets", null, t =>
                        {
                            t.Property("Description")
                                .HasColumnName("pet_description");
                        });
                });

            modelBuilder.Entity("AnimalVolunteer.Domain.Aggregates.Volunteer", b =>
                {
                    b.OwnsOne("AnimalVolunteer.Domain.ValueObjects.Common.ContactInfoList", "ContactInfos", b1 =>
                        {
                            b1.Property<Guid>("VolunteerId")
                                .HasColumnType("uuid");

                            b1.HasKey("VolunteerId");

                            b1.ToTable("volunteers");

                            b1.ToJson("contact_infos");

                            b1.WithOwner()
                                .HasForeignKey("VolunteerId")
                                .HasConstraintName("fk_volunteers_volunteers_id");

                            b1.OwnsMany("AnimalVolunteer.Domain.ValueObjects.Common.ContactInfo", "Contacts", b2 =>
                                {
                                    b2.Property<Guid>("ContactInfoListVolunteerId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)")
                                        .HasAnnotation("Relational:JsonPropertyName", "name");

                                    b2.Property<string>("Note")
                                        .HasMaxLength(500)
                                        .HasColumnType("character varying(500)")
                                        .HasAnnotation("Relational:JsonPropertyName", "note");

                                    b2.Property<string>("PhoneNumber")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)")
                                        .HasAnnotation("Relational:JsonPropertyName", "phone_number");

                                    b2.HasKey("ContactInfoListVolunteerId", "Id");

                                    b2.ToTable("volunteers");

                                    b2.ToJson("contact_infos");

                                    b2.WithOwner()
                                        .HasForeignKey("ContactInfoListVolunteerId")
                                        .HasConstraintName("fk_volunteers_volunteers_contact_info_list_volunteer_id");
                                });

                            b1.Navigation("Contacts");
                        });

                    b.OwnsOne("AnimalVolunteer.Domain.ValueObjects.Common.PaymentDetailsList", "PaymentDetails", b1 =>
                        {
                            b1.Property<Guid>("VolunteerId")
                                .HasColumnType("uuid");

                            b1.HasKey("VolunteerId");

                            b1.ToTable("volunteers");

                            b1.ToJson("payment_details");

                            b1.WithOwner()
                                .HasForeignKey("VolunteerId")
                                .HasConstraintName("fk_volunteers_volunteers_id");

                            b1.OwnsMany("AnimalVolunteer.Domain.ValueObjects.Common.PaymentDetails", "Payments", b2 =>
                                {
                                    b2.Property<Guid>("PaymentDetailsListVolunteerId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Description")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)")
                                        .HasAnnotation("Relational:JsonPropertyName", "description");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)")
                                        .HasAnnotation("Relational:JsonPropertyName", "name");

                                    b2.HasKey("PaymentDetailsListVolunteerId", "Id");

                                    b2.ToTable("volunteers");

                                    b2.ToJson("payment_details");

                                    b2.WithOwner()
                                        .HasForeignKey("PaymentDetailsListVolunteerId")
                                        .HasConstraintName("fk_volunteers_volunteers_payment_details_list_volunteer_id");
                                });

                            b1.Navigation("Payments");
                        });

                    b.OwnsOne("AnimalVolunteer.Domain.ValueObjects.Volunteer.SocialNetworkList", "SocialNetworks", b1 =>
                        {
                            b1.Property<Guid>("VolunteerId")
                                .HasColumnType("uuid");

                            b1.HasKey("VolunteerId");

                            b1.ToTable("volunteers");

                            b1.ToJson("social_networks");

                            b1.WithOwner()
                                .HasForeignKey("VolunteerId")
                                .HasConstraintName("fk_volunteers_volunteers_id");

                            b1.OwnsMany("AnimalVolunteer.Domain.ValueObjects.Volunteer.SocialNetwork", "SocialNetworks", b2 =>
                                {
                                    b2.Property<Guid>("SocialNetworkListVolunteerId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)")
                                        .HasAnnotation("Relational:JsonPropertyName", "name");

                                    b2.Property<string>("URL")
                                        .IsRequired()
                                        .HasMaxLength(500)
                                        .HasColumnType("character varying(500)")
                                        .HasAnnotation("Relational:JsonPropertyName", "url");

                                    b2.HasKey("SocialNetworkListVolunteerId", "Id");

                                    b2.ToTable("volunteers");

                                    b2.ToJson("social_networks");

                                    b2.WithOwner()
                                        .HasForeignKey("SocialNetworkListVolunteerId")
                                        .HasConstraintName("fk_volunteers_volunteers_social_network_list_volunteer_id");
                                });

                            b1.Navigation("SocialNetworks");
                        });

                    b.Navigation("ContactInfos")
                        .IsRequired();

                    b.Navigation("PaymentDetails")
                        .IsRequired();

                    b.Navigation("SocialNetworks")
                        .IsRequired();
                });

            modelBuilder.Entity("AnimalVolunteer.Domain.Entities.Breed", b =>
                {
                    b.HasOne("AnimalVolunteer.Domain.Aggregates.Species", null)
                        .WithMany("Breeds")
                        .HasForeignKey("species_id")
                        .HasConstraintName("fk_breeds_species_species_id");
                });

            modelBuilder.Entity("AnimalVolunteer.Domain.Entities.Pet", b =>
                {
                    b.HasOne("AnimalVolunteer.Domain.Aggregates.Volunteer", null)
                        .WithMany("Pets")
                        .HasForeignKey("volunteer_id")
                        .HasConstraintName("fk_pets_volunteers_volunteer_id");

                    b.OwnsOne("AnimalVolunteer.Domain.ValueObjects.Common.ContactInfoList", "ContactInfos", b1 =>
                        {
                            b1.Property<Guid>("PetId")
                                .HasColumnType("uuid");

                            b1.HasKey("PetId")
                                .HasName("pk_pets");

                            b1.ToTable("pets");

                            b1.ToJson("contact_infos");

                            b1.WithOwner()
                                .HasForeignKey("PetId")
                                .HasConstraintName("fk_pets_pets_pet_id");

                            b1.OwnsMany("AnimalVolunteer.Domain.ValueObjects.Common.ContactInfo", "Contacts", b2 =>
                                {
                                    b2.Property<Guid>("ContactInfoListPetId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)")
                                        .HasAnnotation("Relational:JsonPropertyName", "name");

                                    b2.Property<string>("Note")
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "note");

                                    b2.Property<string>("PhoneNumber")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)")
                                        .HasAnnotation("Relational:JsonPropertyName", "phone_number");

                                    b2.HasKey("ContactInfoListPetId", "Id");

                                    b2.ToTable("pets");

                                    b2.ToJson("contact_infos");

                                    b2.WithOwner()
                                        .HasForeignKey("ContactInfoListPetId")
                                        .HasConstraintName("fk_pets_pets_contact_info_list_pet_id");
                                });

                            b1.Navigation("Contacts");
                        });

                    b.OwnsOne("AnimalVolunteer.Domain.ValueObjects.Common.PaymentDetailsList", "PaymentDetails", b1 =>
                        {
                            b1.Property<Guid>("PetId")
                                .HasColumnType("uuid");

                            b1.HasKey("PetId")
                                .HasName("pk_pets");

                            b1.ToTable("pets");

                            b1.ToJson("payment_details");

                            b1.WithOwner()
                                .HasForeignKey("PetId")
                                .HasConstraintName("fk_pets_pets_pet_id");

                            b1.OwnsMany("AnimalVolunteer.Domain.ValueObjects.Common.PaymentDetails", "Payments", b2 =>
                                {
                                    b2.Property<Guid>("PaymentDetailsListPetId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Description")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)")
                                        .HasAnnotation("Relational:JsonPropertyName", "description");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)")
                                        .HasAnnotation("Relational:JsonPropertyName", "name");

                                    b2.HasKey("PaymentDetailsListPetId", "Id");

                                    b2.ToTable("pets");

                                    b2.ToJson("payment_details");

                                    b2.WithOwner()
                                        .HasForeignKey("PaymentDetailsListPetId")
                                        .HasConstraintName("fk_pets_pets_payment_details_list_pet_id");
                                });

                            b1.Navigation("Payments");
                        });

                    b.OwnsOne("AnimalVolunteer.Domain.ValueObjects.Pet.PetPhotoList", "PetPhotos", b1 =>
                        {
                            b1.Property<Guid>("PetId")
                                .HasColumnType("uuid");

                            b1.HasKey("PetId");

                            b1.ToTable("pets");

                            b1.ToJson("pet_photos");

                            b1.WithOwner()
                                .HasForeignKey("PetId")
                                .HasConstraintName("fk_pets_pets_id");

                            b1.OwnsMany("AnimalVolunteer.Domain.ValueObjects.Pet.PetPhoto", "PetPhotos", b2 =>
                                {
                                    b2.Property<Guid>("PetPhotoListPetId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("FilePath")
                                        .IsRequired()
                                        .HasMaxLength(500)
                                        .HasColumnType("character varying(500)")
                                        .HasAnnotation("Relational:JsonPropertyName", "file_path");

                                    b2.Property<bool>("IsMain")
                                        .HasColumnType("boolean")
                                        .HasAnnotation("Relational:JsonPropertyName", "is_main");

                                    b2.HasKey("PetPhotoListPetId", "Id");

                                    b2.ToTable("pets");

                                    b2.ToJson("pet_photos");

                                    b2.WithOwner()
                                        .HasForeignKey("PetPhotoListPetId")
                                        .HasConstraintName("fk_pets_pets_pet_photo_list_pet_id");
                                });

                            b1.Navigation("PetPhotos");
                        });

                    b.Navigation("ContactInfos")
                        .IsRequired();

                    b.Navigation("PaymentDetails")
                        .IsRequired();

                    b.Navigation("PetPhotos")
                        .IsRequired();
                });

            modelBuilder.Entity("AnimalVolunteer.Domain.Aggregates.Species", b =>
                {
                    b.Navigation("Breeds");
                });

            modelBuilder.Entity("AnimalVolunteer.Domain.Aggregates.Volunteer", b =>
                {
                    b.Navigation("Pets");
                });
#pragma warning restore 612, 618
        }
    }
}
