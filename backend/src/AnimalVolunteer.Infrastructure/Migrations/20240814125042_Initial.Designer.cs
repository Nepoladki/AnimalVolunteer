// <auto-generated />
using System;
using AnimalVolunteer.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AnimalVolunteer.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240814125042_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AnimalVolunteer.Domain.Entities.PaymentDetails", b =>
                {
                    b.Property<Guid>("PaymentDetalisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("payment_detalis_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("payment_details_id")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_details_id");

                    b.HasKey("PaymentDetalisId")
                        .HasName("pk_payment_details");

                    b.HasIndex("payment_details_id")
                        .HasDatabaseName("ix_payment_details_payment_details_id");

                    b.ToTable("payment_details", (string)null);
                });

            modelBuilder.Entity("AnimalVolunteer.Domain.Entities.Pet", b =>
                {
                    b.Property<Guid>("PetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("pet_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("address");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("breed");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("current_status");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("HealthInfo")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("health_info");

                    b.Property<float>("Height")
                        .HasColumnType("real")
                        .HasColumnName("height");

                    b.Property<bool>("IsNeutered")
                        .HasColumnType("boolean")
                        .HasColumnName("is_neutered");

                    b.Property<bool>("IsVaccinated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_vaccinated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("species");

                    b.Property<float>("Weight")
                        .HasColumnType("real")
                        .HasColumnName("weight");

                    b.Property<Guid?>("pet_id")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_id");

                    b.HasKey("PetId")
                        .HasName("pk_pets");

                    b.HasIndex("pet_id")
                        .HasDatabaseName("ix_pets_pet_id");

                    b.ToTable("pets", null, t =>
                        {
                            t.Property("pet_id")
                                .HasColumnName("pet_id1");
                        });
                });

            modelBuilder.Entity("AnimalVolunteer.Domain.Entities.PetPhoto", b =>
                {
                    b.Property<Guid>("PetPhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("pet_photo_id");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("file_path");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("is_main");

                    b.Property<Guid?>("pet_photo_id")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_photo_id");

                    b.HasKey("PetPhotoId")
                        .HasName("pk_pet_photos");

                    b.HasIndex("pet_photo_id")
                        .HasDatabaseName("ix_pet_photos_pet_photo_id");

                    b.ToTable("pet_photos", null, t =>
                        {
                            t.Property("pet_photo_id")
                                .HasColumnName("pet_photo_id1");
                        });
                });

            modelBuilder.Entity("AnimalVolunteer.Domain.Entities.SocialNetwork", b =>
                {
                    b.Property<Guid>("SocialNetworkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("social_network_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("url");

                    b.Property<Guid?>("social_network_id")
                        .HasColumnType("uuid")
                        .HasColumnName("social_network_id");

                    b.HasKey("SocialNetworkId")
                        .HasName("pk_social_network");

                    b.HasIndex("social_network_id")
                        .HasDatabaseName("ix_social_network_social_network_id");

                    b.ToTable("social_network", null, t =>
                        {
                            t.Property("social_network_id")
                                .HasColumnName("social_network_id1");
                        });
                });

            modelBuilder.Entity("AnimalVolunteer.Domain.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("VolunteerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("volunteer_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<int>("ExpirienceYears")
                        .HasColumnType("integer")
                        .HasColumnName("expirience_years");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<int>("PetsFoundedHome")
                        .HasColumnType("integer")
                        .HasColumnName("pets_founded_home");

                    b.Property<int>("PetsInVetClinic")
                        .HasColumnType("integer")
                        .HasColumnName("pets_in_vet_clinic");

                    b.Property<int>("PetsLookingForHome")
                        .HasColumnType("integer")
                        .HasColumnName("pets_looking_for_home");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.HasKey("VolunteerId")
                        .HasName("pk_volunteers");

                    b.ToTable("volunteers", (string)null);
                });

            modelBuilder.Entity("AnimalVolunteer.Domain.Entities.PaymentDetails", b =>
                {
                    b.HasOne("AnimalVolunteer.Domain.Entities.Pet", null)
                        .WithMany("PaymentDetails")
                        .HasForeignKey("payment_details_id")
                        .HasConstraintName("fk_payment_details_pets_payment_details_id");

                    b.HasOne("AnimalVolunteer.Domain.Entities.Volunteer", null)
                        .WithMany("PaymentDetails")
                        .HasForeignKey("payment_details_id")
                        .HasConstraintName("fk_payment_details_volunteers_payment_details_id");
                });

            modelBuilder.Entity("AnimalVolunteer.Domain.Entities.Pet", b =>
                {
                    b.HasOne("AnimalVolunteer.Domain.Entities.Volunteer", null)
                        .WithMany("Pets")
                        .HasForeignKey("pet_id")
                        .HasConstraintName("fk_pets_volunteers_pet_id");
                });

            modelBuilder.Entity("AnimalVolunteer.Domain.Entities.PetPhoto", b =>
                {
                    b.HasOne("AnimalVolunteer.Domain.Entities.Pet", null)
                        .WithMany("PetPhotos")
                        .HasForeignKey("pet_photo_id")
                        .HasConstraintName("fk_pet_photos_pets_pet_photo_id");
                });

            modelBuilder.Entity("AnimalVolunteer.Domain.Entities.SocialNetwork", b =>
                {
                    b.HasOne("AnimalVolunteer.Domain.Entities.Volunteer", null)
                        .WithMany("SocialNetworks")
                        .HasForeignKey("social_network_id")
                        .HasConstraintName("fk_social_network_volunteers_social_network_id");
                });

            modelBuilder.Entity("AnimalVolunteer.Domain.Entities.Pet", b =>
                {
                    b.Navigation("PaymentDetails");

                    b.Navigation("PetPhotos");
                });

            modelBuilder.Entity("AnimalVolunteer.Domain.Entities.Volunteer", b =>
                {
                    b.Navigation("PaymentDetails");

                    b.Navigation("Pets");

                    b.Navigation("SocialNetworks");
                });
#pragma warning restore 612, 618
        }
    }
}
